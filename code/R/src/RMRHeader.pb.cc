// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RMRHeader.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ParameterPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParameterPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* RMRHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RMRHeader_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RhipeMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CombinerMode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_RMRHeader_2eproto() {
  protobuf_AddDesc_RMRHeader_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RMRHeader.proto");
  GOOGLE_CHECK(file != NULL);
  ParameterPair_descriptor_ = file->message_type(0);
  static const int ParameterPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterPair, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterPair, value_),
  };
  ParameterPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParameterPair_descriptor_,
      ParameterPair::default_instance_,
      ParameterPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParameterPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParameterPair));
  RMRHeader_descriptor_ = file->message_type(1);
  static const int RMRHeader_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMRHeader, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMRHeader, rhipewhat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMRHeader, rhipelogfile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMRHeader, rhipe_setup_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMRHeader, rhipe_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMRHeader, rhipe_cleanup_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMRHeader, rhipe_reduce_setup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMRHeader, rhipe_reduce_prekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMRHeader, rhipe_reduce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMRHeader, rhipe_reduce_postkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMRHeader, rhipe_reduce_cleanup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMRHeader, rhipe_outputformat_class_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMRHeader, rhipe_combiner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMRHeader, rhipe_map_buff_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMRHeader, rhipe_map_bytes_read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMRHeader, arguments_),
  };
  RMRHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RMRHeader_descriptor_,
      RMRHeader::default_instance_,
      RMRHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMRHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RMRHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RMRHeader));
  RhipeMode_descriptor_ = file->enum_type(0);
  CombinerMode_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RMRHeader_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParameterPair_descriptor_, &ParameterPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RMRHeader_descriptor_, &RMRHeader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RMRHeader_2eproto() {
  delete ParameterPair::default_instance_;
  delete ParameterPair_reflection_;
  delete RMRHeader::default_instance_;
  delete RMRHeader_reflection_;
}

void protobuf_AddDesc_RMRHeader_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017RMRHeader.proto\",\n\rParameterPair\022\014\n\004na"
    "me\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"\305\003\n\tRMRHeader\022\n\n"
    "\002ID\030\001 \002(\t\022\035\n\tRHIPEWHAT\030\002 \002(\0162\n.RhipeMode"
    "\022\024\n\014RHIPELOGFILE\030\003 \001(\t\022\027\n\017rhipe_setup_ma"
    "p\030\004 \001(\t\022\021\n\trhipe_map\030\005 \001(\t\022\031\n\021rhipe_clea"
    "nup_map\030\006 \001(\t\022\032\n\022rhipe_reduce_setup\030\007 \001("
    "\t\022\033\n\023rhipe_reduce_prekey\030\010 \001(\t\022\024\n\014rhipe_"
    "reduce\030\t \001(\t\022\034\n\024rhipe_reduce_postkey\030\n \001"
    "(\t\022\034\n\024rhipe_reduce_cleanup\030\013 \001(\t\022 \n\030rhip"
    "e_outputformat_class\030\014 \001(\t\022%\n\016rhipe_comb"
    "iner\030\r \001(\0162\r.CombinerMode\022\033\n\023rhipe_map_b"
    "uff_size\030\016 \001(\005\022\034\n\024rhipe_map_bytes_read\030\017"
    " \001(\005\022!\n\targuments\030\020 \003(\0132\016.ParameterPair*"
    "$\n\tRhipeMode\022\n\n\006MAPPER\020\001\022\013\n\007REDUCER\020\002*1\n"
    "\014CombinerMode\022\017\n\013NO_COMBINER\020\000\022\020\n\014USE_CO"
    "MBINER\020\001B$\n\021org.godhuli.rhipeB\017RMRHeader"
    "Protos", 646);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RMRHeader.proto", &protobuf_RegisterTypes);
  ParameterPair::default_instance_ = new ParameterPair();
  RMRHeader::default_instance_ = new RMRHeader();
  ParameterPair::default_instance_->InitAsDefaultInstance();
  RMRHeader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RMRHeader_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RMRHeader_2eproto {
  StaticDescriptorInitializer_RMRHeader_2eproto() {
    protobuf_AddDesc_RMRHeader_2eproto();
  }
} static_descriptor_initializer_RMRHeader_2eproto_;

const ::google::protobuf::EnumDescriptor* RhipeMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RhipeMode_descriptor_;
}
bool RhipeMode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CombinerMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombinerMode_descriptor_;
}
bool CombinerMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ParameterPair::kNameFieldNumber;
const int ParameterPair::kValueFieldNumber;
#endif  // !_MSC_VER

ParameterPair::ParameterPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParameterPair::InitAsDefaultInstance() {
}

ParameterPair::ParameterPair(const ParameterPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParameterPair::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParameterPair::~ParameterPair() {
  SharedDtor();
}

void ParameterPair::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ParameterPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParameterPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParameterPair_descriptor_;
}

const ParameterPair& ParameterPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RMRHeader_2eproto();  return *default_instance_;
}

ParameterPair* ParameterPair::default_instance_ = NULL;

ParameterPair* ParameterPair::New() const {
  return new ParameterPair;
}

void ParameterPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParameterPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParameterPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParameterPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParameterPair::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParameterPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParameterPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParameterPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParameterPair::MergeFrom(const ParameterPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParameterPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParameterPair::CopyFrom(const ParameterPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParameterPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ParameterPair::Swap(ParameterPair* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParameterPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParameterPair_descriptor_;
  metadata.reflection = ParameterPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RMRHeader::kIDFieldNumber;
const int RMRHeader::kRHIPEWHATFieldNumber;
const int RMRHeader::kRHIPELOGFILEFieldNumber;
const int RMRHeader::kRhipeSetupMapFieldNumber;
const int RMRHeader::kRhipeMapFieldNumber;
const int RMRHeader::kRhipeCleanupMapFieldNumber;
const int RMRHeader::kRhipeReduceSetupFieldNumber;
const int RMRHeader::kRhipeReducePrekeyFieldNumber;
const int RMRHeader::kRhipeReduceFieldNumber;
const int RMRHeader::kRhipeReducePostkeyFieldNumber;
const int RMRHeader::kRhipeReduceCleanupFieldNumber;
const int RMRHeader::kRhipeOutputformatClassFieldNumber;
const int RMRHeader::kRhipeCombinerFieldNumber;
const int RMRHeader::kRhipeMapBuffSizeFieldNumber;
const int RMRHeader::kRhipeMapBytesReadFieldNumber;
const int RMRHeader::kArgumentsFieldNumber;
#endif  // !_MSC_VER

RMRHeader::RMRHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RMRHeader::InitAsDefaultInstance() {
}

RMRHeader::RMRHeader(const RMRHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RMRHeader::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rhipewhat_ = 1;
  rhipelogfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rhipe_setup_map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rhipe_map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rhipe_cleanup_map_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rhipe_reduce_setup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rhipe_reduce_prekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rhipe_reduce_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rhipe_reduce_postkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rhipe_reduce_cleanup_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rhipe_outputformat_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rhipe_combiner_ = 0;
  rhipe_map_buff_size_ = 0;
  rhipe_map_bytes_read_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RMRHeader::~RMRHeader() {
  SharedDtor();
}

void RMRHeader::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (rhipelogfile_ != &::google::protobuf::internal::kEmptyString) {
    delete rhipelogfile_;
  }
  if (rhipe_setup_map_ != &::google::protobuf::internal::kEmptyString) {
    delete rhipe_setup_map_;
  }
  if (rhipe_map_ != &::google::protobuf::internal::kEmptyString) {
    delete rhipe_map_;
  }
  if (rhipe_cleanup_map_ != &::google::protobuf::internal::kEmptyString) {
    delete rhipe_cleanup_map_;
  }
  if (rhipe_reduce_setup_ != &::google::protobuf::internal::kEmptyString) {
    delete rhipe_reduce_setup_;
  }
  if (rhipe_reduce_prekey_ != &::google::protobuf::internal::kEmptyString) {
    delete rhipe_reduce_prekey_;
  }
  if (rhipe_reduce_ != &::google::protobuf::internal::kEmptyString) {
    delete rhipe_reduce_;
  }
  if (rhipe_reduce_postkey_ != &::google::protobuf::internal::kEmptyString) {
    delete rhipe_reduce_postkey_;
  }
  if (rhipe_reduce_cleanup_ != &::google::protobuf::internal::kEmptyString) {
    delete rhipe_reduce_cleanup_;
  }
  if (rhipe_outputformat_class_ != &::google::protobuf::internal::kEmptyString) {
    delete rhipe_outputformat_class_;
  }
  if (this != default_instance_) {
  }
}

void RMRHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RMRHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RMRHeader_descriptor_;
}

const RMRHeader& RMRHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RMRHeader_2eproto();  return *default_instance_;
}

RMRHeader* RMRHeader::default_instance_ = NULL;

RMRHeader* RMRHeader::New() const {
  return new RMRHeader;
}

void RMRHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    rhipewhat_ = 1;
    if (has_rhipelogfile()) {
      if (rhipelogfile_ != &::google::protobuf::internal::kEmptyString) {
        rhipelogfile_->clear();
      }
    }
    if (has_rhipe_setup_map()) {
      if (rhipe_setup_map_ != &::google::protobuf::internal::kEmptyString) {
        rhipe_setup_map_->clear();
      }
    }
    if (has_rhipe_map()) {
      if (rhipe_map_ != &::google::protobuf::internal::kEmptyString) {
        rhipe_map_->clear();
      }
    }
    if (has_rhipe_cleanup_map()) {
      if (rhipe_cleanup_map_ != &::google::protobuf::internal::kEmptyString) {
        rhipe_cleanup_map_->clear();
      }
    }
    if (has_rhipe_reduce_setup()) {
      if (rhipe_reduce_setup_ != &::google::protobuf::internal::kEmptyString) {
        rhipe_reduce_setup_->clear();
      }
    }
    if (has_rhipe_reduce_prekey()) {
      if (rhipe_reduce_prekey_ != &::google::protobuf::internal::kEmptyString) {
        rhipe_reduce_prekey_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_rhipe_reduce()) {
      if (rhipe_reduce_ != &::google::protobuf::internal::kEmptyString) {
        rhipe_reduce_->clear();
      }
    }
    if (has_rhipe_reduce_postkey()) {
      if (rhipe_reduce_postkey_ != &::google::protobuf::internal::kEmptyString) {
        rhipe_reduce_postkey_->clear();
      }
    }
    if (has_rhipe_reduce_cleanup()) {
      if (rhipe_reduce_cleanup_ != &::google::protobuf::internal::kEmptyString) {
        rhipe_reduce_cleanup_->clear();
      }
    }
    if (has_rhipe_outputformat_class()) {
      if (rhipe_outputformat_class_ != &::google::protobuf::internal::kEmptyString) {
        rhipe_outputformat_class_->clear();
      }
    }
    rhipe_combiner_ = 0;
    rhipe_map_buff_size_ = 0;
    rhipe_map_bytes_read_ = 0;
  }
  arguments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RMRHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RHIPEWHAT;
        break;
      }
      
      // required .RhipeMode RHIPEWHAT = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RHIPEWHAT:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (RhipeMode_IsValid(value)) {
            set_rhipewhat(static_cast< RhipeMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RHIPELOGFILE;
        break;
      }
      
      // optional string RHIPELOGFILE = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RHIPELOGFILE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rhipelogfile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rhipelogfile().data(), this->rhipelogfile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_rhipe_setup_map;
        break;
      }
      
      // optional string rhipe_setup_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rhipe_setup_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rhipe_setup_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rhipe_setup_map().data(), this->rhipe_setup_map().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_rhipe_map;
        break;
      }
      
      // optional string rhipe_map = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rhipe_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rhipe_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rhipe_map().data(), this->rhipe_map().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rhipe_cleanup_map;
        break;
      }
      
      // optional string rhipe_cleanup_map = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rhipe_cleanup_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rhipe_cleanup_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rhipe_cleanup_map().data(), this->rhipe_cleanup_map().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rhipe_reduce_setup;
        break;
      }
      
      // optional string rhipe_reduce_setup = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rhipe_reduce_setup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rhipe_reduce_setup()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rhipe_reduce_setup().data(), this->rhipe_reduce_setup().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_rhipe_reduce_prekey;
        break;
      }
      
      // optional string rhipe_reduce_prekey = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rhipe_reduce_prekey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rhipe_reduce_prekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rhipe_reduce_prekey().data(), this->rhipe_reduce_prekey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_rhipe_reduce;
        break;
      }
      
      // optional string rhipe_reduce = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rhipe_reduce:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rhipe_reduce()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rhipe_reduce().data(), this->rhipe_reduce().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_rhipe_reduce_postkey;
        break;
      }
      
      // optional string rhipe_reduce_postkey = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rhipe_reduce_postkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rhipe_reduce_postkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rhipe_reduce_postkey().data(), this->rhipe_reduce_postkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_rhipe_reduce_cleanup;
        break;
      }
      
      // optional string rhipe_reduce_cleanup = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rhipe_reduce_cleanup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rhipe_reduce_cleanup()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rhipe_reduce_cleanup().data(), this->rhipe_reduce_cleanup().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_rhipe_outputformat_class;
        break;
      }
      
      // optional string rhipe_outputformat_class = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rhipe_outputformat_class:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rhipe_outputformat_class()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rhipe_outputformat_class().data(), this->rhipe_outputformat_class().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_rhipe_combiner;
        break;
      }
      
      // optional .CombinerMode rhipe_combiner = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rhipe_combiner:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (CombinerMode_IsValid(value)) {
            set_rhipe_combiner(static_cast< CombinerMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_rhipe_map_buff_size;
        break;
      }
      
      // optional int32 rhipe_map_buff_size = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rhipe_map_buff_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rhipe_map_buff_size_)));
          set_has_rhipe_map_buff_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_rhipe_map_bytes_read;
        break;
      }
      
      // optional int32 rhipe_map_bytes_read = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rhipe_map_bytes_read:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rhipe_map_bytes_read_)));
          set_has_rhipe_map_bytes_read();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_arguments;
        break;
      }
      
      // repeated .ParameterPair arguments = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arguments()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_arguments;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RMRHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }
  
  // required .RhipeMode RHIPEWHAT = 2;
  if (has_rhipewhat()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->rhipewhat(), output);
  }
  
  // optional string RHIPELOGFILE = 3;
  if (has_rhipelogfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rhipelogfile().data(), this->rhipelogfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->rhipelogfile(), output);
  }
  
  // optional string rhipe_setup_map = 4;
  if (has_rhipe_setup_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rhipe_setup_map().data(), this->rhipe_setup_map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->rhipe_setup_map(), output);
  }
  
  // optional string rhipe_map = 5;
  if (has_rhipe_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rhipe_map().data(), this->rhipe_map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->rhipe_map(), output);
  }
  
  // optional string rhipe_cleanup_map = 6;
  if (has_rhipe_cleanup_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rhipe_cleanup_map().data(), this->rhipe_cleanup_map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->rhipe_cleanup_map(), output);
  }
  
  // optional string rhipe_reduce_setup = 7;
  if (has_rhipe_reduce_setup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rhipe_reduce_setup().data(), this->rhipe_reduce_setup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->rhipe_reduce_setup(), output);
  }
  
  // optional string rhipe_reduce_prekey = 8;
  if (has_rhipe_reduce_prekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rhipe_reduce_prekey().data(), this->rhipe_reduce_prekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->rhipe_reduce_prekey(), output);
  }
  
  // optional string rhipe_reduce = 9;
  if (has_rhipe_reduce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rhipe_reduce().data(), this->rhipe_reduce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->rhipe_reduce(), output);
  }
  
  // optional string rhipe_reduce_postkey = 10;
  if (has_rhipe_reduce_postkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rhipe_reduce_postkey().data(), this->rhipe_reduce_postkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->rhipe_reduce_postkey(), output);
  }
  
  // optional string rhipe_reduce_cleanup = 11;
  if (has_rhipe_reduce_cleanup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rhipe_reduce_cleanup().data(), this->rhipe_reduce_cleanup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->rhipe_reduce_cleanup(), output);
  }
  
  // optional string rhipe_outputformat_class = 12;
  if (has_rhipe_outputformat_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rhipe_outputformat_class().data(), this->rhipe_outputformat_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->rhipe_outputformat_class(), output);
  }
  
  // optional .CombinerMode rhipe_combiner = 13;
  if (has_rhipe_combiner()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->rhipe_combiner(), output);
  }
  
  // optional int32 rhipe_map_buff_size = 14;
  if (has_rhipe_map_buff_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->rhipe_map_buff_size(), output);
  }
  
  // optional int32 rhipe_map_bytes_read = 15;
  if (has_rhipe_map_bytes_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->rhipe_map_bytes_read(), output);
  }
  
  // repeated .ParameterPair arguments = 16;
  for (int i = 0; i < this->arguments_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->arguments(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RMRHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }
  
  // required .RhipeMode RHIPEWHAT = 2;
  if (has_rhipewhat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->rhipewhat(), target);
  }
  
  // optional string RHIPELOGFILE = 3;
  if (has_rhipelogfile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rhipelogfile().data(), this->rhipelogfile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rhipelogfile(), target);
  }
  
  // optional string rhipe_setup_map = 4;
  if (has_rhipe_setup_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rhipe_setup_map().data(), this->rhipe_setup_map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->rhipe_setup_map(), target);
  }
  
  // optional string rhipe_map = 5;
  if (has_rhipe_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rhipe_map().data(), this->rhipe_map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->rhipe_map(), target);
  }
  
  // optional string rhipe_cleanup_map = 6;
  if (has_rhipe_cleanup_map()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rhipe_cleanup_map().data(), this->rhipe_cleanup_map().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->rhipe_cleanup_map(), target);
  }
  
  // optional string rhipe_reduce_setup = 7;
  if (has_rhipe_reduce_setup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rhipe_reduce_setup().data(), this->rhipe_reduce_setup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->rhipe_reduce_setup(), target);
  }
  
  // optional string rhipe_reduce_prekey = 8;
  if (has_rhipe_reduce_prekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rhipe_reduce_prekey().data(), this->rhipe_reduce_prekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->rhipe_reduce_prekey(), target);
  }
  
  // optional string rhipe_reduce = 9;
  if (has_rhipe_reduce()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rhipe_reduce().data(), this->rhipe_reduce().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->rhipe_reduce(), target);
  }
  
  // optional string rhipe_reduce_postkey = 10;
  if (has_rhipe_reduce_postkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rhipe_reduce_postkey().data(), this->rhipe_reduce_postkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->rhipe_reduce_postkey(), target);
  }
  
  // optional string rhipe_reduce_cleanup = 11;
  if (has_rhipe_reduce_cleanup()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rhipe_reduce_cleanup().data(), this->rhipe_reduce_cleanup().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->rhipe_reduce_cleanup(), target);
  }
  
  // optional string rhipe_outputformat_class = 12;
  if (has_rhipe_outputformat_class()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rhipe_outputformat_class().data(), this->rhipe_outputformat_class().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->rhipe_outputformat_class(), target);
  }
  
  // optional .CombinerMode rhipe_combiner = 13;
  if (has_rhipe_combiner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->rhipe_combiner(), target);
  }
  
  // optional int32 rhipe_map_buff_size = 14;
  if (has_rhipe_map_buff_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->rhipe_map_buff_size(), target);
  }
  
  // optional int32 rhipe_map_bytes_read = 15;
  if (has_rhipe_map_bytes_read()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->rhipe_map_bytes_read(), target);
  }
  
  // repeated .ParameterPair arguments = 16;
  for (int i = 0; i < this->arguments_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->arguments(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RMRHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }
    
    // required .RhipeMode RHIPEWHAT = 2;
    if (has_rhipewhat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rhipewhat());
    }
    
    // optional string RHIPELOGFILE = 3;
    if (has_rhipelogfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rhipelogfile());
    }
    
    // optional string rhipe_setup_map = 4;
    if (has_rhipe_setup_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rhipe_setup_map());
    }
    
    // optional string rhipe_map = 5;
    if (has_rhipe_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rhipe_map());
    }
    
    // optional string rhipe_cleanup_map = 6;
    if (has_rhipe_cleanup_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rhipe_cleanup_map());
    }
    
    // optional string rhipe_reduce_setup = 7;
    if (has_rhipe_reduce_setup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rhipe_reduce_setup());
    }
    
    // optional string rhipe_reduce_prekey = 8;
    if (has_rhipe_reduce_prekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rhipe_reduce_prekey());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string rhipe_reduce = 9;
    if (has_rhipe_reduce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rhipe_reduce());
    }
    
    // optional string rhipe_reduce_postkey = 10;
    if (has_rhipe_reduce_postkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rhipe_reduce_postkey());
    }
    
    // optional string rhipe_reduce_cleanup = 11;
    if (has_rhipe_reduce_cleanup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rhipe_reduce_cleanup());
    }
    
    // optional string rhipe_outputformat_class = 12;
    if (has_rhipe_outputformat_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rhipe_outputformat_class());
    }
    
    // optional .CombinerMode rhipe_combiner = 13;
    if (has_rhipe_combiner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rhipe_combiner());
    }
    
    // optional int32 rhipe_map_buff_size = 14;
    if (has_rhipe_map_buff_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rhipe_map_buff_size());
    }
    
    // optional int32 rhipe_map_bytes_read = 15;
    if (has_rhipe_map_bytes_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rhipe_map_bytes_read());
    }
    
  }
  // repeated .ParameterPair arguments = 16;
  total_size += 2 * this->arguments_size();
  for (int i = 0; i < this->arguments_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arguments(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RMRHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RMRHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RMRHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RMRHeader::MergeFrom(const RMRHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  arguments_.MergeFrom(from.arguments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rhipewhat()) {
      set_rhipewhat(from.rhipewhat());
    }
    if (from.has_rhipelogfile()) {
      set_rhipelogfile(from.rhipelogfile());
    }
    if (from.has_rhipe_setup_map()) {
      set_rhipe_setup_map(from.rhipe_setup_map());
    }
    if (from.has_rhipe_map()) {
      set_rhipe_map(from.rhipe_map());
    }
    if (from.has_rhipe_cleanup_map()) {
      set_rhipe_cleanup_map(from.rhipe_cleanup_map());
    }
    if (from.has_rhipe_reduce_setup()) {
      set_rhipe_reduce_setup(from.rhipe_reduce_setup());
    }
    if (from.has_rhipe_reduce_prekey()) {
      set_rhipe_reduce_prekey(from.rhipe_reduce_prekey());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rhipe_reduce()) {
      set_rhipe_reduce(from.rhipe_reduce());
    }
    if (from.has_rhipe_reduce_postkey()) {
      set_rhipe_reduce_postkey(from.rhipe_reduce_postkey());
    }
    if (from.has_rhipe_reduce_cleanup()) {
      set_rhipe_reduce_cleanup(from.rhipe_reduce_cleanup());
    }
    if (from.has_rhipe_outputformat_class()) {
      set_rhipe_outputformat_class(from.rhipe_outputformat_class());
    }
    if (from.has_rhipe_combiner()) {
      set_rhipe_combiner(from.rhipe_combiner());
    }
    if (from.has_rhipe_map_buff_size()) {
      set_rhipe_map_buff_size(from.rhipe_map_buff_size());
    }
    if (from.has_rhipe_map_bytes_read()) {
      set_rhipe_map_bytes_read(from.rhipe_map_bytes_read());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RMRHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RMRHeader::CopyFrom(const RMRHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RMRHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < arguments_size(); i++) {
    if (!this->arguments(i).IsInitialized()) return false;
  }
  return true;
}

void RMRHeader::Swap(RMRHeader* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rhipewhat_, other->rhipewhat_);
    std::swap(rhipelogfile_, other->rhipelogfile_);
    std::swap(rhipe_setup_map_, other->rhipe_setup_map_);
    std::swap(rhipe_map_, other->rhipe_map_);
    std::swap(rhipe_cleanup_map_, other->rhipe_cleanup_map_);
    std::swap(rhipe_reduce_setup_, other->rhipe_reduce_setup_);
    std::swap(rhipe_reduce_prekey_, other->rhipe_reduce_prekey_);
    std::swap(rhipe_reduce_, other->rhipe_reduce_);
    std::swap(rhipe_reduce_postkey_, other->rhipe_reduce_postkey_);
    std::swap(rhipe_reduce_cleanup_, other->rhipe_reduce_cleanup_);
    std::swap(rhipe_outputformat_class_, other->rhipe_outputformat_class_);
    std::swap(rhipe_combiner_, other->rhipe_combiner_);
    std::swap(rhipe_map_buff_size_, other->rhipe_map_buff_size_);
    std::swap(rhipe_map_bytes_read_, other->rhipe_map_bytes_read_);
    arguments_.Swap(&other->arguments_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RMRHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RMRHeader_descriptor_;
  metadata.reflection = RMRHeader_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

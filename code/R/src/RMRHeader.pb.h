// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RMRHeader.proto

#ifndef PROTOBUF_RMRHeader_2eproto__INCLUDED
#define PROTOBUF_RMRHeader_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RMRHeader_2eproto();
void protobuf_AssignDesc_RMRHeader_2eproto();
void protobuf_ShutdownFile_RMRHeader_2eproto();

class ParameterPair;
class RMRHeader;

enum RhipeMode {
  MAPPER = 1,
  REDUCER = 2
};
bool RhipeMode_IsValid(int value);
const RhipeMode RhipeMode_MIN = MAPPER;
const RhipeMode RhipeMode_MAX = REDUCER;
const int RhipeMode_ARRAYSIZE = RhipeMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* RhipeMode_descriptor();
inline const ::std::string& RhipeMode_Name(RhipeMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    RhipeMode_descriptor(), value);
}
inline bool RhipeMode_Parse(
    const ::std::string& name, RhipeMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RhipeMode>(
    RhipeMode_descriptor(), name, value);
}
enum CombinerMode {
  NO_COMBINER = 0,
  USE_COMBINER = 1
};
bool CombinerMode_IsValid(int value);
const CombinerMode CombinerMode_MIN = NO_COMBINER;
const CombinerMode CombinerMode_MAX = USE_COMBINER;
const int CombinerMode_ARRAYSIZE = CombinerMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CombinerMode_descriptor();
inline const ::std::string& CombinerMode_Name(CombinerMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CombinerMode_descriptor(), value);
}
inline bool CombinerMode_Parse(
    const ::std::string& name, CombinerMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CombinerMode>(
    CombinerMode_descriptor(), name, value);
}
// ===================================================================

class ParameterPair : public ::google::protobuf::Message {
 public:
  ParameterPair();
  virtual ~ParameterPair();
  
  ParameterPair(const ParameterPair& from);
  
  inline ParameterPair& operator=(const ParameterPair& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ParameterPair& default_instance();
  
  void Swap(ParameterPair* other);
  
  // implements Message ----------------------------------------------
  
  ParameterPair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ParameterPair& from);
  void MergeFrom(const ParameterPair& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  
  // @@protoc_insertion_point(class_scope:ParameterPair)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_value();
  inline void clear_has_value();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_RMRHeader_2eproto();
  friend void protobuf_AssignDesc_RMRHeader_2eproto();
  friend void protobuf_ShutdownFile_RMRHeader_2eproto();
  
  void InitAsDefaultInstance();
  static ParameterPair* default_instance_;
};
// -------------------------------------------------------------------

class RMRHeader : public ::google::protobuf::Message {
 public:
  RMRHeader();
  virtual ~RMRHeader();
  
  RMRHeader(const RMRHeader& from);
  
  inline RMRHeader& operator=(const RMRHeader& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RMRHeader& default_instance();
  
  void Swap(RMRHeader* other);
  
  // implements Message ----------------------------------------------
  
  RMRHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RMRHeader& from);
  void MergeFrom(const RMRHeader& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  
  // optional .RhipeMode RHIPEWHAT = 2;
  inline bool has_rhipewhat() const;
  inline void clear_rhipewhat();
  static const int kRHIPEWHATFieldNumber = 2;
  inline RhipeMode rhipewhat() const;
  inline void set_rhipewhat(RhipeMode value);
  
  // optional string RHIPELOGFILE = 3;
  inline bool has_rhipelogfile() const;
  inline void clear_rhipelogfile();
  static const int kRHIPELOGFILEFieldNumber = 3;
  inline const ::std::string& rhipelogfile() const;
  inline void set_rhipelogfile(const ::std::string& value);
  inline void set_rhipelogfile(const char* value);
  inline void set_rhipelogfile(const char* value, size_t size);
  inline ::std::string* mutable_rhipelogfile();
  inline ::std::string* release_rhipelogfile();
  
  // optional string rhipe_outputformat_class = 12;
  inline bool has_rhipe_outputformat_class() const;
  inline void clear_rhipe_outputformat_class();
  static const int kRhipeOutputformatClassFieldNumber = 12;
  inline const ::std::string& rhipe_outputformat_class() const;
  inline void set_rhipe_outputformat_class(const ::std::string& value);
  inline void set_rhipe_outputformat_class(const char* value);
  inline void set_rhipe_outputformat_class(const char* value, size_t size);
  inline ::std::string* mutable_rhipe_outputformat_class();
  inline ::std::string* release_rhipe_outputformat_class();
  
  // optional .CombinerMode rhipe_combiner = 13;
  inline bool has_rhipe_combiner() const;
  inline void clear_rhipe_combiner();
  static const int kRhipeCombinerFieldNumber = 13;
  inline CombinerMode rhipe_combiner() const;
  inline void set_rhipe_combiner(CombinerMode value);
  
  // optional int32 rhipe_map_buff_size = 14;
  inline bool has_rhipe_map_buff_size() const;
  inline void clear_rhipe_map_buff_size();
  static const int kRhipeMapBuffSizeFieldNumber = 14;
  inline ::google::protobuf::int32 rhipe_map_buff_size() const;
  inline void set_rhipe_map_buff_size(::google::protobuf::int32 value);
  
  // optional int32 rhipe_map_bytes_read = 15;
  inline bool has_rhipe_map_bytes_read() const;
  inline void clear_rhipe_map_bytes_read();
  static const int kRhipeMapBytesReadFieldNumber = 15;
  inline ::google::protobuf::int32 rhipe_map_bytes_read() const;
  inline void set_rhipe_map_bytes_read(::google::protobuf::int32 value);
  
  // repeated .ParameterPair serialized_assignments = 16;
  inline int serialized_assignments_size() const;
  inline void clear_serialized_assignments();
  static const int kSerializedAssignmentsFieldNumber = 16;
  inline const ::ParameterPair& serialized_assignments(int index) const;
  inline ::ParameterPair* mutable_serialized_assignments(int index);
  inline ::ParameterPair* add_serialized_assignments();
  inline const ::google::protobuf::RepeatedPtrField< ::ParameterPair >&
      serialized_assignments() const;
  inline ::google::protobuf::RepeatedPtrField< ::ParameterPair >*
      mutable_serialized_assignments();
  
  // repeated .ParameterPair arguments = 17;
  inline int arguments_size() const;
  inline void clear_arguments();
  static const int kArgumentsFieldNumber = 17;
  inline const ::ParameterPair& arguments(int index) const;
  inline ::ParameterPair* mutable_arguments(int index);
  inline ::ParameterPair* add_arguments();
  inline const ::google::protobuf::RepeatedPtrField< ::ParameterPair >&
      arguments() const;
  inline ::google::protobuf::RepeatedPtrField< ::ParameterPair >*
      mutable_arguments();
  
  // @@protoc_insertion_point(class_scope:RMRHeader)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rhipewhat();
  inline void clear_has_rhipewhat();
  inline void set_has_rhipelogfile();
  inline void clear_has_rhipelogfile();
  inline void set_has_rhipe_outputformat_class();
  inline void clear_has_rhipe_outputformat_class();
  inline void set_has_rhipe_combiner();
  inline void clear_has_rhipe_combiner();
  inline void set_has_rhipe_map_buff_size();
  inline void clear_has_rhipe_map_buff_size();
  inline void set_has_rhipe_map_bytes_read();
  inline void clear_has_rhipe_map_bytes_read();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* id_;
  ::std::string* rhipelogfile_;
  int rhipewhat_;
  int rhipe_combiner_;
  ::std::string* rhipe_outputformat_class_;
  ::google::protobuf::int32 rhipe_map_buff_size_;
  ::google::protobuf::int32 rhipe_map_bytes_read_;
  ::google::protobuf::RepeatedPtrField< ::ParameterPair > serialized_assignments_;
  ::google::protobuf::RepeatedPtrField< ::ParameterPair > arguments_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_RMRHeader_2eproto();
  friend void protobuf_AssignDesc_RMRHeader_2eproto();
  friend void protobuf_ShutdownFile_RMRHeader_2eproto();
  
  void InitAsDefaultInstance();
  static RMRHeader* default_instance_;
};
// ===================================================================


// ===================================================================

// ParameterPair

// required string name = 1;
inline bool ParameterPair::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ParameterPair::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ParameterPair::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ParameterPair::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ParameterPair::name() const {
  return *name_;
}
inline void ParameterPair::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ParameterPair::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ParameterPair::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ParameterPair::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ParameterPair::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string value = 2;
inline bool ParameterPair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ParameterPair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ParameterPair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ParameterPair::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& ParameterPair::value() const {
  return *value_;
}
inline void ParameterPair::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void ParameterPair::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void ParameterPair::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ParameterPair::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* ParameterPair::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RMRHeader

// required string ID = 1;
inline bool RMRHeader::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RMRHeader::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RMRHeader::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RMRHeader::clear_id() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& RMRHeader::id() const {
  return *id_;
}
inline void RMRHeader::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RMRHeader::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void RMRHeader::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RMRHeader::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    id_ = new ::std::string;
  }
  return id_;
}
inline ::std::string* RMRHeader::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .RhipeMode RHIPEWHAT = 2;
inline bool RMRHeader::has_rhipewhat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RMRHeader::set_has_rhipewhat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RMRHeader::clear_has_rhipewhat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RMRHeader::clear_rhipewhat() {
  rhipewhat_ = 1;
  clear_has_rhipewhat();
}
inline RhipeMode RMRHeader::rhipewhat() const {
  return static_cast< RhipeMode >(rhipewhat_);
}
inline void RMRHeader::set_rhipewhat(RhipeMode value) {
  GOOGLE_DCHECK(RhipeMode_IsValid(value));
  set_has_rhipewhat();
  rhipewhat_ = value;
}

// optional string RHIPELOGFILE = 3;
inline bool RMRHeader::has_rhipelogfile() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RMRHeader::set_has_rhipelogfile() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RMRHeader::clear_has_rhipelogfile() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RMRHeader::clear_rhipelogfile() {
  if (rhipelogfile_ != &::google::protobuf::internal::kEmptyString) {
    rhipelogfile_->clear();
  }
  clear_has_rhipelogfile();
}
inline const ::std::string& RMRHeader::rhipelogfile() const {
  return *rhipelogfile_;
}
inline void RMRHeader::set_rhipelogfile(const ::std::string& value) {
  set_has_rhipelogfile();
  if (rhipelogfile_ == &::google::protobuf::internal::kEmptyString) {
    rhipelogfile_ = new ::std::string;
  }
  rhipelogfile_->assign(value);
}
inline void RMRHeader::set_rhipelogfile(const char* value) {
  set_has_rhipelogfile();
  if (rhipelogfile_ == &::google::protobuf::internal::kEmptyString) {
    rhipelogfile_ = new ::std::string;
  }
  rhipelogfile_->assign(value);
}
inline void RMRHeader::set_rhipelogfile(const char* value, size_t size) {
  set_has_rhipelogfile();
  if (rhipelogfile_ == &::google::protobuf::internal::kEmptyString) {
    rhipelogfile_ = new ::std::string;
  }
  rhipelogfile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RMRHeader::mutable_rhipelogfile() {
  set_has_rhipelogfile();
  if (rhipelogfile_ == &::google::protobuf::internal::kEmptyString) {
    rhipelogfile_ = new ::std::string;
  }
  return rhipelogfile_;
}
inline ::std::string* RMRHeader::release_rhipelogfile() {
  clear_has_rhipelogfile();
  if (rhipelogfile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rhipelogfile_;
    rhipelogfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string rhipe_outputformat_class = 12;
inline bool RMRHeader::has_rhipe_outputformat_class() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RMRHeader::set_has_rhipe_outputformat_class() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RMRHeader::clear_has_rhipe_outputformat_class() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RMRHeader::clear_rhipe_outputformat_class() {
  if (rhipe_outputformat_class_ != &::google::protobuf::internal::kEmptyString) {
    rhipe_outputformat_class_->clear();
  }
  clear_has_rhipe_outputformat_class();
}
inline const ::std::string& RMRHeader::rhipe_outputformat_class() const {
  return *rhipe_outputformat_class_;
}
inline void RMRHeader::set_rhipe_outputformat_class(const ::std::string& value) {
  set_has_rhipe_outputformat_class();
  if (rhipe_outputformat_class_ == &::google::protobuf::internal::kEmptyString) {
    rhipe_outputformat_class_ = new ::std::string;
  }
  rhipe_outputformat_class_->assign(value);
}
inline void RMRHeader::set_rhipe_outputformat_class(const char* value) {
  set_has_rhipe_outputformat_class();
  if (rhipe_outputformat_class_ == &::google::protobuf::internal::kEmptyString) {
    rhipe_outputformat_class_ = new ::std::string;
  }
  rhipe_outputformat_class_->assign(value);
}
inline void RMRHeader::set_rhipe_outputformat_class(const char* value, size_t size) {
  set_has_rhipe_outputformat_class();
  if (rhipe_outputformat_class_ == &::google::protobuf::internal::kEmptyString) {
    rhipe_outputformat_class_ = new ::std::string;
  }
  rhipe_outputformat_class_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RMRHeader::mutable_rhipe_outputformat_class() {
  set_has_rhipe_outputformat_class();
  if (rhipe_outputformat_class_ == &::google::protobuf::internal::kEmptyString) {
    rhipe_outputformat_class_ = new ::std::string;
  }
  return rhipe_outputformat_class_;
}
inline ::std::string* RMRHeader::release_rhipe_outputformat_class() {
  clear_has_rhipe_outputformat_class();
  if (rhipe_outputformat_class_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rhipe_outputformat_class_;
    rhipe_outputformat_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .CombinerMode rhipe_combiner = 13;
inline bool RMRHeader::has_rhipe_combiner() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RMRHeader::set_has_rhipe_combiner() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RMRHeader::clear_has_rhipe_combiner() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RMRHeader::clear_rhipe_combiner() {
  rhipe_combiner_ = 0;
  clear_has_rhipe_combiner();
}
inline CombinerMode RMRHeader::rhipe_combiner() const {
  return static_cast< CombinerMode >(rhipe_combiner_);
}
inline void RMRHeader::set_rhipe_combiner(CombinerMode value) {
  GOOGLE_DCHECK(CombinerMode_IsValid(value));
  set_has_rhipe_combiner();
  rhipe_combiner_ = value;
}

// optional int32 rhipe_map_buff_size = 14;
inline bool RMRHeader::has_rhipe_map_buff_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RMRHeader::set_has_rhipe_map_buff_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RMRHeader::clear_has_rhipe_map_buff_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RMRHeader::clear_rhipe_map_buff_size() {
  rhipe_map_buff_size_ = 0;
  clear_has_rhipe_map_buff_size();
}
inline ::google::protobuf::int32 RMRHeader::rhipe_map_buff_size() const {
  return rhipe_map_buff_size_;
}
inline void RMRHeader::set_rhipe_map_buff_size(::google::protobuf::int32 value) {
  set_has_rhipe_map_buff_size();
  rhipe_map_buff_size_ = value;
}

// optional int32 rhipe_map_bytes_read = 15;
inline bool RMRHeader::has_rhipe_map_bytes_read() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RMRHeader::set_has_rhipe_map_bytes_read() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RMRHeader::clear_has_rhipe_map_bytes_read() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RMRHeader::clear_rhipe_map_bytes_read() {
  rhipe_map_bytes_read_ = 0;
  clear_has_rhipe_map_bytes_read();
}
inline ::google::protobuf::int32 RMRHeader::rhipe_map_bytes_read() const {
  return rhipe_map_bytes_read_;
}
inline void RMRHeader::set_rhipe_map_bytes_read(::google::protobuf::int32 value) {
  set_has_rhipe_map_bytes_read();
  rhipe_map_bytes_read_ = value;
}

// repeated .ParameterPair serialized_assignments = 16;
inline int RMRHeader::serialized_assignments_size() const {
  return serialized_assignments_.size();
}
inline void RMRHeader::clear_serialized_assignments() {
  serialized_assignments_.Clear();
}
inline const ::ParameterPair& RMRHeader::serialized_assignments(int index) const {
  return serialized_assignments_.Get(index);
}
inline ::ParameterPair* RMRHeader::mutable_serialized_assignments(int index) {
  return serialized_assignments_.Mutable(index);
}
inline ::ParameterPair* RMRHeader::add_serialized_assignments() {
  return serialized_assignments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ParameterPair >&
RMRHeader::serialized_assignments() const {
  return serialized_assignments_;
}
inline ::google::protobuf::RepeatedPtrField< ::ParameterPair >*
RMRHeader::mutable_serialized_assignments() {
  return &serialized_assignments_;
}

// repeated .ParameterPair arguments = 17;
inline int RMRHeader::arguments_size() const {
  return arguments_.size();
}
inline void RMRHeader::clear_arguments() {
  arguments_.Clear();
}
inline const ::ParameterPair& RMRHeader::arguments(int index) const {
  return arguments_.Get(index);
}
inline ::ParameterPair* RMRHeader::mutable_arguments(int index) {
  return arguments_.Mutable(index);
}
inline ::ParameterPair* RMRHeader::add_arguments() {
  return arguments_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ParameterPair >&
RMRHeader::arguments() const {
  return arguments_;
}
inline ::google::protobuf::RepeatedPtrField< ::ParameterPair >*
RMRHeader::mutable_arguments() {
  return &arguments_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< RhipeMode>() {
  return RhipeMode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< CombinerMode>() {
  return CombinerMode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RMRHeader_2eproto__INCLUDED
